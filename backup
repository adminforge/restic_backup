#!/bin/bash

# read configuration
source /etc/.restic.config

##############################################
### DO NOT CHANGE ANYTHING BELOW THIS LINE ###
##############################################

# restic binary
RESTIC=$(which restic)

install_restic() {
    if ! [ -f /etc/.restic.config ]; then
    echo "downloading .restic.config ..."
    $(which wget) --quiet https://raw.githubusercontent.com/adminforge/restic_backup/master/etc/.restic.config -O /etc/.restic.config
    fi
    echo "downloading restic 0.9.4 linux amd64 ..."
    $(which wget) --quiet https://github.com/restic/restic/releases/download/v0.9.4/restic_0.9.4_linux_amd64.bz2 -O /tmp/restic_0.9.4_linux_amd64.bz2
    echo "unzip and move to /usr/local/bin/ ..."
    $(which bunzip2) /tmp/restic_0.9.4_linux_amd64.bz2
    mv /tmp/restic_0.9.4_linux_amd64 /usr/local/bin/restic
    chmod +x /usr/local/bin/restic
    echo "running restic self-update ..."
    /usr/local/bin/restic self-update
    /usr/local/bin/restic init
    echo "create bash completion ..."
    mkdir /etc/bash_completion.d >/dev/null 2>&1
    backup generate --bash-completion /etc/bash_completion.d/backup
    sed -i 's/restic/backup/g' /etc/bash_completion.d/backup
}

install_restic_freebsd() {
    echo "downloading restic 0.9.4 freebsd amd64 ..."
    $(which wget) --quiet https://github.com/restic/restic/releases/download/v0.9.4/restic_0.9.4_freebsd_amd64.bz2 -O /tmp/restic_0.9.4_freebsd_amd64.bz2
    echo "unzip and move to /usr/local/bin/ ..."
    $(which bunzip2) /tmp/restic_0.9.4_freebsd_amd64.bz2
    mv /tmp/restic_0.9.4_freebsd_amd64 /usr/local/bin/restic
    chmod +x /usr/local/bin/restic
    echo "running restic self-update ..."
    /usr/local/bin/restic self-update
    /usr/local/bin/restic init
}

install_systemd() {
cat <<EOF > /etc/systemd/system/daily-backup.timer
[Unit]
Description=Daily Backup Timer

[Timer]
OnCalendar=*-*-* 00:00:00
RandomizedDelaySec=18000
Persistent=True

[Install]
WantedBy=timers.target
EOF

cat <<EOF > /etc/systemd/system/daily-backup.service
[Unit]
Description=Daily Backup

[Service]
Type=simple
Nice=10
ExecStart=/usr/local/bin/backup run
Environment="HOME=/root"
EOF

cat <<EOF > /etc/systemd/system/daily-backup-cleanup.timer
[Unit]
Description=Daily Backup Cleanup Timer

[Timer]
OnCalendar=*-*-* 05:00:00
RandomizedDelaySec=18000
Persistent=True

[Install]
WantedBy=timers.target
EOF

cat <<EOF > /etc/systemd/system/daily-backup-cleanup.service
[Unit]
Description=Daily Backup Cleanup

[Service]
Type=simple
Nice=10
ExecStart=/usr/local/bin/backup cleanup
Environment="HOME=/root"
EOF

cat <<EOF > /etc/systemd/system/daily-backup-mysql.timer
[Unit]
Description=Daily MySQL Backup Timer

[Timer]
OnCalendar=*-*-* 00:00:00
RandomizedDelaySec=18000
Persistent=True

[Install]
WantedBy=timers.target
EOF

cat <<EOF > /etc/systemd/system/daily-backup-mysql.service
[Unit]
Description=Daily MySQL Backup

[Service]
Type=simple
Nice=10
ExecStart=/usr/local/bin/backup mysql
Environment="HOME=/root"
EOF

cat <<EOF > /etc/systemd/system/weekly-backup-self-update.timer
[Unit]
Description=Weekly Backup Self-Update Timer

[Timer]
OnCalendar=weekly
Persistent=True

[Install]
WantedBy=timers.target
EOF

cat <<EOF > /etc/systemd/system/weekly-backup-self-update.service
[Unit]
Description=Weekly Backup Self-Update

[Service]
Type=simple
Nice=10
ExecStart=/usr/local/bin/backup update
Environment="HOME=/root"
EOF

systemctl daemon-reload
systemctl start daily-backup.timer daily-backup-cleanup.timer weekly-backup-self-update.timer >/dev/null 2>&1
systemctl enable daily-backup.timer daily-backup-cleanup.timer weekly-backup-self-update.timer >/dev/null 2>&1
}

move_script() {
CURRENTPWD=$(pwd)
if ! [ -f /usr/local/bin/${0##*/} ]; then
    chmod +x $CURRENTPWD/${0##*/}; mv -v $CURRENTPWD/${0##*/} /usr/local/bin/
else
    echo "restic backup wrapper already installed!"
    exit
fi
}

case "$1" in

  run)
    $RESTIC backup --one-file-system --exclude-caches $EXCLUDE $LIMITUPLOAD $SOURCEDIRS
  ;;

  mysql)
    $(which mysqldump) -u $MYSQLUSER -p$MYSQLPW -h $MYSQLHOST --all-databases | $RESTIC backup --tag mysql --stdin --stdin-filename /all_databases.sql
  ;;

  cleanup)
    $RESTIC forget --keep-hourly $KEEPHOURLY --keep-daily $KEEPDAILY --keep-weekly $KEEPWEEKLY --keep-monthly $KEEPMONTHLY --no-lock --prune
  ;;

  restoresnap)
    $RESTIC restore $2 --target $RESTOREFOLDER/restore-$(date +"%Y-%m-%d_%H%M")
  ;;

  restore)
    $RESTIC restore $2 --include $3 --target $RESTOREFOLDER/restore-$(date +"%Y-%m-%d_%H%M")
  ;;

  install)
    if [ $(grep -E "Debian|Ubuntu" /etc/*-release | wc -l) -ge 1 ]; then
     echo "install on debian/ubuntu linux ..."
     move_script
     apt-get update && apt-get -y install vim wget bzip2
     install_restic
     install_systemd
    elif [ $(grep -E "CentOS" /etc/*-release | wc -l) -ge 1 ]; then
     echo "install on centos linux ..."
     move_script
     yum install -y vim-minimal.x86_64 wget.x86_64 bzip2.x86_64
     ln -s /usr/bin/vi /usr/bin/vim
     install_restic
     install_systemd
    elif [ $(grep -E "Arch|Manjaro" /etc/*-release | wc -l) -ge 1 ]; then
     echo "install on arch linux ..."
     move_script
     pacman --noconfirm -S vim wget bzip2 restic
     /usr/bin/restic init
     install_systemd
    elif [ -f "/bin/freebsd-version" ]; then
     echo "install on freebsd ..."
     move_script
     pkg install vim-console wget bash zip
     install_restic_freebsd
    else
     echo "EXIT - no debian, ubuntu, centos, arch linux or freebsd detected !"
     exit 1
    fi
  ;;
  
  update)
    $RESTIC self-update
    $(which wget) --quiet https://raw.githubusercontent.com/adminforge/restic_backup/master/backup -O /usr/local/bin/backup
  ;;
  
  nagios)
    echo "Installing Nagios 'check_restic_daily' NRPE Plugin:"
    sed -i '/command\[check_restic_daily\]=/d; 1h;1!H;$!d;x;s!.*command\[[^\n]*!&\ncommand[check_restic_daily]=/usr/lib/nagios/plugins/check_restic_daily!' /etc/nagios/nrpe.cfg

cat <<EOF > /usr/lib/nagios/plugins/check_restic_daily
#!/usr/bin/env bash

source /etc/.restic.config

# Nagios alert status
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3

# list snapshots for this host
snapshots=\$(/usr/local/bin/restic snapshots -c -H \$(hostname))

# check daily restic backup run
daily=\$(echo \$snapshots | egrep "\$(date '+%Y-%m-%d')|\$(date --date='1 day ago' +%Y-%m-%d)" | wc -l)
if [ \$daily = 0 ]; then
        echo "WARNING - daily restic backup did NOT run !"
        exit "\$STATE_WARNING"
fi

# check if a backup exists
exists=\$(echo \$snapshots | wc -l)
if [ \$exists = 0 ]; then
        echo "CRITICAL - NO restic backup found !"
        exit "\$STATE_CRITICAL"
fi

echo "OK - daily restic backup is DONE"
exit "\$STATE_OK"
EOF

    chmod +x /usr/lib/nagios/plugins/check_restic_daily
    systemctl restart nagios-nrpe-server.service
    echo ""
    echo "Test run:"
    /usr/lib/nagios/plugins/check_restic_daily
   echo ""
   echo "Nagios Service example:"
cat <<EOF

define service{
        use                             generic-service
        host_name                       my.hostname.com
        service_description             Restic Backup
        check_command                   check_nrpe_1arg!check_restic_daily
        }

EOF
    exit 0
  ;;
  
  edit)
    $(which vim) /etc/.restic.config
  ;;

  -h|--help)
cat <<EOF
* restic backup wrapper v1.5 (c) adminForge.de 2020
* Syntax: ${0##*/} {run|mysql|cleanup|restoresnap|restore|install|update|nagios|edit|-h}
* Examples:
    list snapshots     : ${0##*/} snapshots
    run backup         : ${0##*/} run
    run mysql backup   : ${0##*/} mysql
    find file          : ${0##*/} find /home/user/.bashrc
    restore snapshot   : ${0##*/} restoresnap a323a1e3
    restore file/folder: ${0##*/} restore a323a1e3 /home/user/.bashrc
EOF
    exit 1
  ;;

  *)
    $RESTIC $@
  ;;

esac
